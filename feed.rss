<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>N Scale Modeller</title><description></description><link>https://www.yoursite.com</link><atom:link href="https://www.yoursite.com/feed.rss" rel="self" type="application/rss+xml" /><language>en</language><generator>Ignite v0.1.0</generator><image><url>https://www.yoursite.com/images/icon32.png</url><title>N Scale Modeller</title><link>https://www.yoursite.com</link><width>32</width><height>32</height></image><item><guid isPermaLink="true">https://www.yoursite.com/2019/2019-05-10-linear-stepper</guid><title>Linear Stepper to Operate Turnouts</title><link>https://www.yoursite.com/2019/2019-05-10-linear-stepper</link><description><![CDATA[After being a bit disappointed with both my muscle wire and servo experiments to operate turnouts, I started doing a bit of research on linear actuators. While most were very expensive, I eventually stumbled on some at AliExpress by searching for the term ‘Miniature Slide Screw Stepper’ or ‘linear stepper’ and various combinations of similar words. They looked ideal so I bought some, similar to these:]]></description><pubDate>Fri, 10 May 2019 22:00:00 +1000</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Turnout Control]]></category><category><![CDATA[Linear Stepper Motors]]></category><content:encoded><![CDATA[<p>After being a bit disappointed with both my <a href="https://www.yoursite.com/2018/2018-05-21-muscle-wire-update">muscle wire</a> and <a href="https://www.yoursite.com/2018/2018-04-15-rc-servos">servo</a> experiments to operate turnouts, I started doing a bit of research on linear actuators. While most were very expensive, I eventually stumbled on some at AliExpress by searching for the term ‘Miniature Slide Screw Stepper’ or ‘linear stepper’ and various combinations of similar words. They looked ideal so I bought some, similar to these:</p><!--more-->
<p>[img: 500, /images/2019/stepper-screw-slider.jpg]</p><p>I ended up spending quite a bit of time trying to figure out how to mount these things and attach some mechanism to the slide to move a turnout.</p><p>[img: 350, /images/2019/stepper-experiments.jpg]</p><p>Unfortunately they were so small that they were very difficult to work with. None of the motors came with wires attached, so I had to - delicately - solder some wires to the motor and create some sort of mount to support the wires since the connection to the motor was so fine. Even soldering wires was a real problem as more than a few seconds of heat basically destroyed the motor connection points as they were attached with plastic.</p><p>Another issue was that the slide that travelled along the screw just ‘sat’ on the slide screw so it could easily jump if there was too much pressure preventing the slide from moving. This meant that it was impossible to really know exactly where the slide was on the screw unless you were very careful.</p><p>They did work though. And they were quiet and easy to control, so I decided to buy some bigger ones and eventually came across these:</p><p>[img: 350, /images/2019/stepper-screw-large.jpg]</p><p>Even though they didn’t come with a slide, I thought the groove in the screw was deep and wide enough that I could use a piece of spring wire sitting in the groove as the slider. They were pretty cheap at about USD1.50 as well. And they came with an FPC type connector for easy soldering. For reference, the diameter of the screw is about 3mm.</p><p>I ended up buying a few and after a bit of experimentation finally had something that worked well. Here is what I came up with:</p><p>[img: 100, /images/2019/mounted-stepper-side.jpg,/images/2019/mounted-stepper-bottom.jpg]</p><p>They are a bit big and clunky but I am sure with a bit of work I can come up with a better form factor.</p><p><strong>HOW IT WORKS</strong></p><p>Using pliers, make a right angle bend in a length of thin spring wire, about 10mm from the end. Make a further ‘hook’ right at the end of the wire’. This hooked part fits in a hole in the turnout throw bar.</p><p>Drill a hole through the turnout from the top, just behind the throw bar (~8mm, but measure it), so that when the spring wire is passed through the hole, the hooked part fits in the throwbar hole. Twisting this wire from below should throw the turnout.</p><p>Position and glue the motor to the bottom of the turnout so that the wire is about 10mm from the motor screw. I had to use spacers to support the motor because the motor hung a bit below the base of the slider. Bend the wire again so that it rests on top of the screw with a bit of tension, which holds the wire in place. Cut the wire to length.</p><p>Turning the stepper screw by hand should now make the turnout move. It will only require a few turns.</p><p><strong>IMPORTANT:</strong> Before hooking the stepper up to some sort of motor control you should really know what you are doing, since an out of control stepper could damage the turnout. You need to be able to make it turn one step at a time in either direction.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2018/2018-05-21-muscle-wire-update</guid><title>Muscle Wire Update</title><link>https://www.yoursite.com/2018/2018-05-21-muscle-wire-update</link><description><![CDATA[This now happened quite a while ago now but as luck would have it, barely a week after I made my last post on using muscle wire for turnout actuators my last bit of wire broke :-(   It was a bit of a shame really, as the test rig had operated for months without any problems.]]></description><pubDate>Mon, 21 May 2018 22:00:00 +1000</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Turnout Control]]></category><category><![CDATA[Muscle Wire]]></category><content:encoded><![CDATA[<p>This now happened quite a while ago now but as luck would have it, barely a week after I made my last post on using muscle wire for turnout actuators my last bit of wire broke :-(   It was a bit of a shame really, as the test rig had operated for months without any problems.</p><p>What happened was that I built an actuator based on the crank system as described in a previous <a href="https://www.yoursite.com/2018/2018-04-15-rc-servos">post on servos</a> and at <a href="http://www.tamvalleyrr.com/howto/servoswitchdecoder.html">Tamalpais Valley Railroad</a>, but instead of using a servo to move the crank I reused my last bit of muscle wire to pull on one side of the crank and a spring on the other side to pull the crank back. I used a small piece of styrene with 3 holes in it to connect the muscle wire, the crank and the spring:</p><!--more-->
<p>[img: 250, /images/2018/crank.jpg]</p><p>This setup worked well for about 6 weeks. As with the initial test, I actuated the wire by flipping the load switch on my power supply half a dozen times each morning and then left the switch on for the rest of the day, so that the muscle wire was under load most of the time. The turnout worked flawlessly until one morning I noticed there was no current flowing through the wire (my power supply has a current meter). Turning over my test rig I saw that the muscle wire was broken.</p><p>After my huge initial disappointment I noticed something a bit strange about the location of the styrene connector. This connector is made of thin styrene and in the diagram you can see that I have turned the last 5 mm or so of the crank downwards and fitted the connector over this. However, the connector was now on the crank arm part, i.e. it had slipped <strong>past</strong> the bend. Maybe it is just my wishful thinking, but it looked very much like the connector had slipped past the bend and gradually worked its way up the crank arm. As it got closer to the bearing part of the crank - where it goes up through the baseboard to the turnout - the force on the wire would have increased enormously. Hence the broken wire. Anyway that is my story and I’m sticking to it:-)</p><p>Only problem is, I am now definitely out of wire.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2018/2018-05-20-muscle-wire</guid><title>Muscle Wire to Operate Turnouts</title><link>https://www.yoursite.com/2018/2018-05-20-muscle-wire</link><description><![CDATA[Well I know I haven’t posted much in a while, but rest assured there have been exciting developments going on over here on a number of fronts.]]></description><pubDate>Sun, 20 May 2018 22:00:00 +1000</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Turnout Control]]></category><category><![CDATA[Muscle Wire]]></category><content:encoded><![CDATA[<p>Well I know I haven’t posted much in a while, but rest assured there have been exciting developments going on over here on a number of fronts.</p><p>The first thing is, I am gradually becoming convinced that I may have ‘cracked’ the holy grail of finding a cheap turnout actuator for my layout. My last couple of posts have looked at using servos, and they show a lot of promise, however I have been experimenting with something better - muscle wire.</p><p>Now, truth to tell, I have thought of using muscle wire - Nitinol wire - for a long while now. I bought a wire sample kit and book nearly 10 years ago and have off and on (mainly off) tried to actuate turnouts using various mechanisms. I have a small drawer of ‘experiments’ gone wrong as you can see here (note the fried resister in the experiment at the top):</p><!--more-->
<p>[img: 350, /images/2018/muscle-wire-experiments.jpg]</p><p>So don’t say I haven’t tried!</p><p>Anyway, a couple of months ago I started experimenting again, as a final test to see if it could be done. Comments like in <a href="http://www.model-railroad-hobbyist.com/node/295">this long thread</a> and particularly from near the bottom of the second page onwards, made me start to think that maybe it couldn’t, at least not easily. However in a bit of desperation I created this final proof of concept using the last of my wire:</p><p>[img: 250, /images/2018/crank.jpg]</p><p>This is just using a spring to act as tension on the wire - and a lot more wire. I made doubly sure there was no excess strain on the wire by first hanging some weights (coins) off the spring. The force required to stretch the spring was well below the wires limit, even though the spring was quite strong.</p><p>Well it worked perfectly for the several months of the experiment. Every day I flipped the on/off switch on my power supply and ‘actuated’ the wire at least two dozen times. Probably a lot more. The wire was then left ‘on’, ie under strain, for the rest of the day. I honestly didn’t see any of the ‘weakening’ of the wire after an hour or so. It pulled just as strongly on the last day of the test as the first. I often checked the ‘throw’ with a steel ruler and it stayed at 3.5 mm or so (about 3%) which is about right for the length of wire I used.</p><p><strong>UPDATE: 2018</strong> Again these days I would just use and Arduino to continuously activate and release the wire, followed by long holding periods.</p><p>I started thinking about where I had gone wrong before and why all my muscle wire experiments had failed and I have concluded - with no proof of course - that is was likely a combination of:</p><ol><li>Not using enough wire. The kit comes with a 5 short lengths of wire. So I naturally  used as little as possible, using lever action to extend the travel distance.</li><li>Excess strain. Strain above the wires’ limit will kill it. Even once. It may appear to work but its basically stuffed. As you can see, the way I had been using the wire in 1. was probably causing this.</li></ol><p>This strain failure can be quite hard to see. I had one recent design where the muscle wire pulled the turnout closed and it seemed to be promising. But after a while it didn’t really work quite as well as it did at first. What probably happened - again no proof - is that the wire pulled the turnout closed alright, but then kept pulling against the closed turnout and the strain went way up. A simple spring at one end may have prevented that, but now you have to make sure the springs tension is greater than required to close the point, so the spring only takes up the extra strain. Not hard but not that obvious either.</p><p>I’m the first to admit that things could still go wrong so I’m doing a lot more testing. The comments in that forum talk of failure after a few thousand cycles and loss of strength after an hour or so. I have seen no loss of strength, and with the design I will show in my next post, a failure after a few thousand cycles (how long is that in ‘real’ operating time?) would be easy to fix anyway.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2018/2018-04-15-rc-servos</guid><title>RC Servos to Operate Turnouts</title><link>https://www.yoursite.com/2018/2018-04-15-rc-servos</link><description><![CDATA[I’ve been working on low cost ways to control turnouts. I bought some servos (AU$7 for 4) on eBay and tried to operate my hand made turnout with one of them. Here is a picture of the initial setup:]]></description><pubDate>Sun, 15 Apr 2018 22:00:00 +1000</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Turnout Control]]></category><content:encoded><![CDATA[<p>I’ve been working on low cost ways to control turnouts. I bought some servos (AU$7 for 4) on eBay and tried to operate my hand made turnout with one of them. Here is a picture of the initial setup:</p><!--more-->
<p>[img: 200, /images/2018/servo-turnout.jpg]</p><p>Servos need about 5 volts plus a pulsed control signal to work. I’ll eventually use a microprocessor to generate the pulse, but for now I’m using 555 timers. The circuit on the breadboard contains two 555 timers. The first timer  generates a continuous pulse 50 times per second. This pulse triggers the second timer which then produces a pulse between 1 and 2 ms, depending on the knob.</p><p><strong>UPDATE 2018:</strong> These days I would just use an Arduino to control the servo. Also, the circuit I used is no longer available on the internet but I am sure you can find one if you want to use 555 timers.</p><p>The servos look like they may be sort-of OK to control a turnout, but there are two problems. The first problem is that the servos make a bit of noise when moving to a new position. They also tend to buzz quite loudly if put under strain - like what happens when a point rail is pushed or pulled tightly against a stock rail. The whole lot is amplified by being mounted on some fibreboard as in the picture.</p><p>The first problem should be able to be reduced by some sort of isolation in the mounting, but the second problem will require careful setting of the pulse endpoints. These endpoints are the minimum and maximum length of the servo control pulse. These will have to be user configurable in some way as they will vary from turnout to turnout.</p><p>Just the other day I came across an interesting website on using servos to control model railroad turnouts. It looks much easier than my setup as it doesn’t require much to hold the servo. I will give it a try and see how it goes.</p><p>The website is <a href="http://www.tamvalleyrr.com/howto/servoswitchdecoder.html">Tamalpais Valley Railroad</a>. He also has a schematic for controlling up to 4 servos using a micro-controller.</p><p><strong>UPDATE 2018:</strong> Since I started experimenting with servos for turnouts around 2010 they have become quite popular for turnout control. Googling will bring up lots of hits with different ways to configure the servo. However I decided the noise problem meant there had to be a better solution.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2017/2017-03-10-turnout-using-jig</guid><title>First Turnouts Using Dremel Tool Jig</title><link>https://www.yoursite.com/2017/2017-03-10-turnout-using-jig</link><description><![CDATA[Here is a picture of the first set of points made with the turnout jig and proper materials. This took about 3 hours to make. I think it turned out pretty well.]]></description><pubDate>Fri, 10 Mar 2017 23:00:00 +1100</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Turnouts]]></category><content:encoded><![CDATA[<p>Here is a picture of the first set of points made with the turnout jig and proper materials. This took about 3 hours to make. I think it turned out pretty well.</p><!--more-->
<p>[img: 225, /images/2017/turnout-on-cork.jpg]</p><p>I also experimented a bit with what sort of base to put the points on. Here I am using cork. The PC ties are a bit thinner than the wooden sleepers, so I used a shim and glued the turnout to the cork only at 4 of the PC ties. The wooden sleepers just slide under the rail and are glued to the cork only. This should make it easy to remove the turnout from the base if necessary.</p><p>Here is another set of points, this time mounted on rubber and wood. A bit more solid, but I am starting to think its best just to leave the points ‘bare’ and just glue them down (at the PC ties) where needed. A bit depends on how I eventually get the points to move.</p><p>[img: 225, /images/2017/turnout-on-rubber.jpg]</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2017/2017-01-23-dremel-turnout-jig</guid><title>Dremel Tool Turnout Jig</title><link>https://www.yoursite.com/2017/2017-01-23-dremel-turnout-jig</link><description><![CDATA[As mentioned in my last post, I have discovered that a Dremel type moto-tool makes an excellent point shaping tool for constructing model railroad turnouts. Combined with the simple jig below I found the process to be much easier and faster than the traditional filing method.]]></description><pubDate>Mon, 23 Jan 2017 23:00:00 +1100</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Turnouts]]></category><content:encoded><![CDATA[<p>As mentioned in my last post, I have discovered that a Dremel type moto-tool makes an excellent point shaping tool for constructing model railroad turnouts. Combined with the simple jig below I found the process to be much easier and faster than the traditional filing method.</p><p><strong>Here is a picture of the completed unit:</strong></p><!--more-->
<p>[img: 225, /images/2017/turnout-jig/full-jig.jpg]</p><p>The idea is that rail is placed upside down between 2 aluminium strips that secure it tightly. This holder is then mounted on a slide that moves past the Dremel tool. The holder can swivel to create different angles. I use No. 409 cut off disks to cut and shape the rails. Points, stock rail notches and frogs can all be made with this jig.</p><p>While a bit fiddley, this arrangement allows angles of 1:25 or less to be ground fairly easily and accurately.</p><p><strong>The moto-tool holding part of the jig:</strong></p><p>[img: 225, /images/2017/turnout-jig/dremel-holder.jpg]</p><p>The details of this part will vary depending on the moto tool used, but I used a 300mm x 120mm piece of 12mm mdf for the base and two up-right pieces to hold the tool. A 19mm hole cut in the front piece gave me a good fit for a 300 series Dremel tool. This was drilled with a spade bit. The rear upright has a 50mm hole which is a bit large. I cut this with a hole saw. This piece was then cut in half and bolts passed through it from the base. The bolt heads were recessed into the base so that the jig sits flat. A piece of rubber was glued to the upper hole to provide a snug fit for the tool when the nuts are tightened. Calculations for the heights of these two holes above the baseboard are described below. Standard glued butt joints were used.</p><p><strong>The slider part of the jig:</strong></p><p>[img: 160, /images/2017/turnout-jig/slide-detail.jpg, /images/2017/turnout-jig/slide-detail1.jpg, /images/2017/turnout-jig/slide-detail2.jpg]</p><p>This consists of a base of 12mm mdf with 2 runners underneath that slide along the fixed piece of mdf attached to the base. These are made from 12mm x 30mm mdf. When the runners are glued to the base they are also clamped on their side tightly against a third piece acting as the slider. A shim made of a piece of paper is added to provide a small bit of clearance. After the glue has dried the slide edges that contact each other are rubbed with candle wax to allow smooth running. The top of slider base has a wide groove across it to provide clearance for the cutoff bit. This was cut with a router. On top of the base is a swiveling jig made of three strips of  3mm thick aluminum glued to a thin 3mm mdf base. These aluminium strips hold the rail tightly upside down against the cutoff tool.</p><p><strong>The rail holder:</strong></p><p>[img: 170, /images/2017/turnout-jig/rail-holder.jpg]</p><p>After the strips of aluminium have been glued to the 3mm base, the base mdf is cut out to form a ‘C’ shaped holder. I used contact cement to glue the first aluminium strip to one edge of the base and after it dried added the two shorter piece on the other side. A section of rail was used to keep the right gap between the strips. To remove the inner part of the ‘C’, just cut down each side at the top and bottom of the ‘C’ with a small saw and use a scoring knife to score the base along the long side of the ‘C’, next to the long aluminium strip. Score each side several times, then bend the piece back and forward until it comes apart.</p><p>This rail holder is attached to the slider base using a small bolt at its center, so that it can swivel. The bolt is recessed into the base of the slider. When the holder is parallel to the cutoff bit there is a gap of about 4 mm to allow for the rail and adjustment of the cutoff bit.</p><p><strong>Position of Dremel Tool holes</strong> - The height of the rail holder in relation to the cutoff wheel is important. The height needs to be such that the rail top (actually the bottom as it is upside down) is just a few mm below the center of the cutoff wheel. The gives allowance for the bolt holding the cutoff wheel. The actual height needs to be calculated according to the materials used to construct the slider part of the jig, which is then used to figure out the locations of the two holes holding the moto-tool.</p><p><strong>Grinding and cutting</strong></p><p>Don’t forget safety precautions - glasses etc. To make a turnout you need to cut or grind 6 pieces of rail:</p><ul><li>Two pieces for the stock rails just have a small section ground away.</li><li>Two other pieces for the point rails are ground to a sharp point at about 1:25 angle or less.</li><li>The last two pieces make up the frog. These are cut at the frog angle, and one piece needs a further area removed so the other rail butts up properly.</li></ul><p>I have a couple of holes drilled through the rail holder to consistently get the same angle. I use a carpenters angle to set a new angle and then drill a hole through the rail holder and into the base. Then when I need to reproduce the angle I insert a drill bit into the correct hole after the hole is aligned with the corresponding hole in the base. Each new angle actually requires that the rail holder be set to the same but opposite angle as well. A bit hard to explain so here is a diagram:</p><p>[img: 200, /images/2017/turnout-jig/angle-detail.jpg]</p><p>For a number 6 turnout I am using 1:25 for both the points and the corresponding groove in the stock rails and of course 1:6 for the frog.</p><p>To cut, just add a piece of rail - base side up - to the holder and adjust the cutoff wheel so it starts the cut where you want it. Using a medium tool speed gently move the slider across and make the cut. When cutting a point  I cut until just before it breaks through the rail and then clip off the last piece by hand. This prevents the ground point from sometimes being dragged down between the holder and the cutoff wheel.</p><p>Grinding the stock rails is similar except you only cut the groove a short distance - less than half way though the rail. It takes a bit of practice to get the cut to start and end where you want it, and also how far through to cut the stock rail, but once you figure out where to make the cuts, it is quite reproducible:</p><p>[img: 50, /images/2017/turnout-jig/stockrail-detail.jpg]</p><p>It also gets a bit confusing working out which way to do the cut, as the rail is upside down, but basically you want to cut a point and stock rail in one direction, then adjust the jig to the opposite but same angle and cut another point and stock rail. A point and stock rail from each direction then make a pair.</p><p>The 2 frog rails are cut from two different directions as well.  A small section of one of the rails also has part of the wider base ground flush with the side of the rail:</p><p>[img: 150, /images/2017/turnout-jig/frog-detail.jpg]</p><p><strong>Notes:</strong></p><ul><li>The cutoff wheels wear out after a smallish number of cuts - about 3 turnouts worth - and need to be replaced at the first sign of wear. I’ve used generic cutoff wheels without problems and they are quite cheap.</li><li>When cutting a stock and point rail pair with the angle pointing away from the rail you have to ‘back into’ the rail to cut it. The rail will tend to lift out of the jig in this case so you have to hold it a bit more firmly.</li><li>I may try cutting the stock rail notch at a smaller angle than the point. Perhaps 1:30</li><li>The point angle - 1:25 may need to be modified for different frog angles. I have only made No. 6 turnouts so far and 1:25 looks about right.</li><li>If I was building the jig again I would consider making the rail holder ‘C’ part from thicker mdf. If it was say 12mm and the cutoff wheels were small you wouldn’t need to router a clearance slot in the slider base and adjusting the cutoff wheel would be easier.</li></ul><p>After the rails are ground I clean them up with a file and sometimes an oilstone. None of the jig dimensions are that critical but you may have to experiment a bit to get it right.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2017/2017-01-22-turnouts-4-and-5</guid><title>Turnouts 4 and 5</title><link>https://www.yoursite.com/2017/2017-01-22-turnouts-4-and-5</link><description><![CDATA[A few days after that router episode I hit on the idea of using my Dremel Tool to grind the turnout points. I probably would have thought of it earlier but I only just got the Dremel for Christmas and wasn’t really familiar with it. I quickly grabbed a short piece of rail, put it in a vice and stuck a No. 409 grinding disk into the Dremel. Success! Time to make another jig!]]></description><pubDate>Sun, 22 Jan 2017 23:00:00 +1100</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Turnouts]]></category><content:encoded><![CDATA[<p>A few days after that router episode I hit on the idea of using my Dremel Tool to grind the turnout points. I probably would have thought of it earlier but I only just got the Dremel for Christmas and wasn’t really familiar with it. I quickly grabbed a short piece of rail, put it in a vice and stuck a No. 409 grinding disk into the Dremel. Success! Time to make another jig!</p><!--more-->
<p>I also decided to take the plunge and buy some supplies to build proper turnouts and ordered some MicroEngineering Code 55 rail and flextrack, as well as some PC board ties for sleepers and some track gauges.</p><p>While waiting for the new rail to arrive I practiced making turnouts with the new turnout grinding jig - which worked rather well. A lot less stressful and quite quick too. I managed to cut the pieces for turnout number five in about half an hour and with practice I am sure this will get better.</p><p>When I get the time I will post a step by step guide of how I make my turnouts and some of the tricks I have learned. There are plenty of websites that show how to do it and my method is really just a variation on this. But did I mention my grinding jig works ‘great’!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2017/2017-01-21-first-turnout-jig</guid><title>A Turnout Jig</title><link>https://www.yoursite.com/2017/2017-01-21-first-turnout-jig</link><description><![CDATA[After building 3 turnouts I have been thinking a bit on how to speed up their construction. By far the slowest - and hardest - part is filing the 2 switch rail points and a corresponding notch on the stock rails. It’s also quite stressful and easy to mess up.]]></description><pubDate>Sat, 21 Jan 2017 23:00:00 +1100</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Turnouts]]></category><content:encoded><![CDATA[<p>After building 3 turnouts I have been thinking a bit on how to speed up their construction. By far the slowest - and hardest - part is filing the 2 switch rail points and a corresponding notch on the stock rails. It’s also quite stressful and easy to mess up.</p><p>My first idea was to create some sort of jig and use a wood router to grind the rail to a point. This might seem strange but I have accidentally routed straight through a nail while cutting slots in wood on several occasions without much ill effect to the router bit, so it seemed quite a reasonable idea at the time :-)</p><!--more-->
<p>To make the jig I used some thin (3 mm) pieces of mdf glued to a baseboard to hold the rail upside down and another 2 pieces of thicker mdf to guide the router. The pieces holding the rail were at a slight angle to the router guides and the idea was that I would start at one end and the router bit would gradually contact the rail as I moved the router along the guide. Needless to say it was a total failure and <strong>I don’t recommend doing this!</strong> As soon as the router bit touched the railthe rail shot out of its slot. I tried again, holding down the rail with one hand and managed to stop the rail from flying out, but even after 30 seconds or so I had barely ground away any rail. That stuff is so tough that the whole jig was vibrating like crazy and I was sure I would lose a finger or worse. Maybe not the first time but sooner or later.</p><p>Sorry, I do not have a picture of this particular contraption as it ended up in the bin.</p><p>Lesson learned - <strong>do not use a wood router to grind turnout points!</strong></p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2017/2017-01-20-turnout-3</guid><title>Turnout 3</title><link>https://www.yoursite.com/2017/2017-01-20-turnout-3</link><description><![CDATA[Here is a picture of my third effort. Still not too bad but realistically not much better than the first:]]></description><pubDate>Fri, 20 Jan 2017 23:00:00 +1100</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Turnouts]]></category><content:encoded><![CDATA[<p>Here is a picture of my third effort. Still not too bad but realistically not much better than the first:</p><!--more-->
<p>[img: 200, /images/2017/first-turnout.jpg]</p><p>The soldering is a bit better but I goofed a bit here. Trying to improve my soldering I used some flux but since I didn’t have any electrical type flux on hand I used some Bakers Flux instead. This ‘worked’ but it is strongly acid and would probably corrode the joints after a while. I went out to an electronics store and got a flux pen for my next efforts.</p><p>This turnout took at least 4 hours to make, which is still way too long. Hopefully with a bit of practice I can get it down to under 2.</p><p>Turnout 2 was a disaster. I tried to rush it way too much and stuffed up completely. I ended up using it to practice cutting electrical isolation gaps in the rails with my Dremel tool.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2017/2017-01-19-first-turnout</guid><title>My First Hand Built Turnout</title><link>https://www.yoursite.com/2017/2017-01-19-first-turnout</link><description><![CDATA[Well it took a while - at least 6 hours spread over a few days - but here it is.  I think it isn’t too bad for a first effort.]]></description><pubDate>Thu, 19 Jan 2017 23:00:00 +1100</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Turnouts]]></category><content:encoded><![CDATA[<p>Well it took a while - at least 6 hours spread over a few days - but here it is.  I think it isn’t too bad for a first effort.</p><!--more-->
<p>[img: 200, /images/2017/first-turnout.jpg]</p><p>I know it looks as ugly as sin, but this is just using what I had on hand, to see how hard it is. All I used was code 80 rail from an old piece of flextrack, a file, some Veroboard, a soldering iron, and callipers to get the track spacing correct.</p><p>Most of the ugliness comes from the veroboard used for the ties and my lame soldering efforts - I hope!  Anyway, when it was finished I hooked it up to some flex track and pushed a piece of rolling stock through and it worked fine.</p><p>In case you are wondering, Veroboard is a type of printed circuit board made up of strips of copper with holes at 1/10” centers. It’s very handy for small electronics projects. I cut the veroboard using a stanley knife. I cut between the copper strips by holding the board in a vice at just the right height so one copper strip was in the vice and scored the board along the top of the vice a number of times, front and back. The veroboard is then snapped off at the scoring point leaving a usable, if ugly, pc tie.</p><p>I basically used the method shown in the <a href="https://www.youtube.com/view_play_list?p=B3A33FD038C92797">YouTube Videos Here</a>. This goes through the whole process in 50 or so 5 minute clips. They need a bit of editing but it’s easy to follow. The first 20 or so show the main details.</p><p>It’s quite difficult holding the rail in a vice at a shallow enough angle to get a sharp point but with a bit of practice it will probably get easier. Another thing I didn’t count on was parallax error when laying the finished bits and pieces over the paper template. When you glue down the ties to the template the rails are raised a bit and it is just a little more difficult lining everything up before soldering.</p><p>Anyway, it wasn’t that hard and most readers will have most of what is required so – have a go!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2017/2017-01-18-old-post-1</guid><title>Some Posts From My Old Blog</title><link>https://www.yoursite.com/2017/2017-01-18-old-post-1</link><description><![CDATA[As I mentioned in my first post, I had an earlier blog with a number of entries about building handmade turnouts. Unfortunately the blogs’ Wordpress database got borked so I had to start again, but I did manage to retrieve many of the posts.]]></description><pubDate>Wed, 18 Jan 2017 23:00:00 +1100</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Uncategorized]]></category><content:encoded><![CDATA[<p>As I mentioned in my first post, I had an earlier blog with a number of entries about building handmade turnouts. Unfortunately the blogs’ Wordpress database got borked so I had to start again, but I did manage to retrieve many of the posts.</p><p>So without further ado I’ll put them back up.</p><!--more-->
<h5>Post 1 from my old blog - building hand made turnouts:</h5><p>Even though I have been interested in building an n scale model railroad layout for quite a while now, what really got me interested again were sites <a href="http://members.shaw.ca/sask.rail/construction/lsbuild/lsswitch.html">like this</a> or <a href="http://www.model-railroad-infoguy.com/hand-laid-track.html">this</a> and especially <a href="http://www.bronx-terminal.com/?p=4303">this guy</a> have been building their own turnouts.</p><p>They made it look rather easy and they certainly look much better than store bought turnouts, so I was determined to give it a try. This also fits in with my interest of doing as much as I can rather than buying it.</p><p>So over Christmas I gave it a go. Armed with a new file and some old code 80 flextrack I began my first adventure into model railroading…</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2015/2015-01-30-software-available</guid><title>Software Available</title><link>https://www.yoursite.com/2015/2015-01-30-software-available</link><description><![CDATA[I’ve added the software that I have been developing to my GitHub repository. The link can be found on the Software Downloads page.]]></description><pubDate>Thu, 29 Jan 2015 23:00:00 +1100</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Arduino]]></category><category><![CDATA[DCC]]></category><category><![CDATA[Software]]></category><category><![CDATA[DCC Command Station]]></category><content:encoded><![CDATA[<p>I’ve added the software that I have been developing to my GitHub repository. The link can be found on the <a href="https://www.yoursite.com/downloads//">Software Downloads</a> page.</p><p>The repository contains a simple Arduino sketch to send a DCC signal to a booster, a very simple ‘booster tester’ that just flips the port connected to the booster every 5 seconds (basically a modified ‘blink’ sketch) so that you can measure the booster output with a multimeter, and a very early version of my MacDCC Command Station software.</p><!--more-->
]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2015/2015-01-29-command-station</guid><title>MacDCC Command Station</title><link>https://www.yoursite.com/2015/2015-01-29-command-station</link><description><![CDATA[Over the last few weeks I have been building an Arduino and Mac based DCC command station and today it all successfully came together with the running of my first locomotive under DCC control!]]></description><pubDate>Thu, 29 Jan 2015 23:00:00 +1100</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Arduino]]></category><category><![CDATA[DCC]]></category><category><![CDATA[DCC Command Station]]></category><content:encoded><![CDATA[<p>Over the last few weeks I have been building an Arduino and Mac based DCC command station and today it all successfully came together with the running of my first locomotive under DCC control!</p><p>The Arduino software is quite simple, just receiving raw bytes from my Mac in a very simple format, which is then converted to DCC and sent out to a booster. The format is just a byte specifying how many further bytes are in the message, followed by the actual DCC bytes including checksum. After the required number of bytes have been received by the Arduino, the message is validated using the checksum, then replaces the oldest of the current two messages being sent. The Arduino software continuously sends out the last two commands that it receives so that no message is <a href="https://www.yoursite.com/2015/2015-01-09-thinking-about-a-command-station">sent twice in a row</a>. It is only a slight modification of the code mentioned in <a href="https://www.yoursite.com/2015/2015-01-02-sending-dcc-with-arduino">this post</a>.</p><!--more-->
<p>The Mac side is a bit more complicated and no where near complete. However, it basically consists of a dispatcher which contains 2 queues of differing priorities, high and low. A message from a button or slider is put into either the high or low priority queue depending whether it is a loco message (mainly speed and emergency stop I think) or not. Meanwhile, the dispatcher sends messages out of the serial port to the Arduino, sending a few from the high priority queue in a round robin fashion and then one from the low priority queue, then back to the high priority queue, and so on. When a message has been sent a number times from the high priority queue it is removed from that queue and placed into the low priority queue and after it has been sent from the low priority queue a few times it is removed from the dispatcher. The stimulus to send another message comes from an acknowledgement from the Arduino that a message has been received. There is no error checking yet but so far it works well.</p><p>A <a href="https://www.yoursite.com/2015/2015-01-02-sending-dcc-with-arduino">previous post</a> mentioned that I have been testing all this using two Arduinos hooked directly together without any of the booster hardware required to actually run a layout. This makes it much easier to debug the software side of things. However once I got the software up and running it was time to concentrate on the hardware. I first built the hardware side of the <a href="http://www.mynabay.com/dcc_monitor/">MynaBay DCC monitor</a> on a breadboard and hooked the transmitting Arduino directly to it (i.e. no booster). Luckily, things still worked, so it was time to build the booster. I built the one shown below, leaving out the thermal flag, overload and the filter (so basically just 4 caps and the LMD18200). Before I hooked up the output of the booster to the input of the Arduino monitor I ran a very basic blink type program on the ‘Command’ Arduino to make the input to the booster go very slowly high and low and checked the booster outputs with a multimeter. Sure enough, the outputs swung from approximately +14V to -14V in response. Next step was to hook the output of the booster to the input of the monitor hardware and reload the Arduino command software. Still working. Finally…. I wired up a short section of track to the booster and ran my first loco under DCC control!</p><p>I only had a couple of problems that had to be sorted out. The 11 legs of the LMD18200 have a non standard spacing so they won’t fit into a proto-board so I ended up soldering a wire to each leg. Apparently the LMD is also static sensitive, which I only found out after I’d handled it quite a bit. Still worked though. The Arduino transmitter was also self powered rather than via the same power supply as the booster in the diagram so I had to add a ground wire from the Arduino to the booster.</p><p>Here is a schematic of the LMD18200 booster - taken from now defunct OScale.net website. Similar LMD18200 based modules are available by Googling.</p><p>[img: 250, /images/2015/dcc-booster.jpg]</p><p>Here is a picture of the setup. Note that I just wired up the LMD18200 directly to the prototyping board rather than use the breakout board as shown here.</p><p>[img: 250, /images/2015/booster-decoder.jpg]</p><p>In a couple of days I will add the Arduino transmitter code ( modified from O-scale ), the booster testing ‘blink’ program and the MacDCC command station software to my download page.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2015/2015-01-09-thinking-about-a-command-station</guid><title>Thinking About a Command Station</title><link>https://www.yoursite.com/2015/2015-01-09-thinking-about-a-command-station</link><description><![CDATA[In the discussion below to keep everything straight as to which code I am talking about:]]></description><pubDate>Fri, 09 Jan 2015 23:00:00 +1100</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Arduino]]></category><category><![CDATA[DCC]]></category><category><![CDATA[DCC Command Station]]></category><content:encoded><![CDATA[<p>In the discussion below to keep everything straight as to which code I am talking about:</p><ul><li>Communication from a PC (in my case a Mac) to the Arduino I’ll call a ‘command’.</li><li>Communication from the Arduino to the booster I’ll call a ‘packet’.</li><li>A message or message packet is a ‘command’ packet as distinguished from an idle packet.</li></ul><p>The overriding philosophy of my command station will be to keep the code in the Arduino as simple as possible and have most of the smarts in the software running on the Mac. With this in mind, probably the simplest possible command station for the Arduino would be code to accept a new command from a Mac (or PC) via the serial port, convert this command to a valid DCC packet, and then continuously send this packet to the booster. However, while this would probably work, it would be out of spec because the <a href="http://www.nmra.org/index-nmra-standards-and-recommended-practices">NMRA standard S 9.2 (line 116)</a> says:</p><!--more-->
<ul><li>A Digital Decoder shall be able to act upon multiple packets addressed to it, provided the time between the packet end bit of the first packet and the packet start bit of the second packet are separated by at least 5 milliseconds.*</li><li>*Care must be taken to ensure that two packets with identical addresses are not are not transmitted within 5 milliseconds of each other for addresses in the range between 112-127 as older decoders may interpret these packets as service mode packets (see RP-9.2.3)</li></ul><p>Fortunately it turns out that an idle packet takes about 6.25ms to send, so it looks like the Arduino code would be in spec if it continuously sent a message packet followed by an idle packet. An optimisation of this would be that when when the Arduino receives a second command from the PC it alternates between sending this new message and the old message rather than always alternating between a message and idle packet. However, a complication of this optimisation is that the two messages could conflict with each other, especially if they are to the same decoder address. For instance, one message could be telling a decoder to switch on while the other message could tell it to switch off! This is because in the above simple example, the Arduino will keep sending the same message until the next command is received from the PC. If a command is sent to switch a decoder ‘on’ and no other command is sent before an ‘off’ command is sent – even if sent much later – the Arduino software will start alternating between the two messages at over a hundred times a second, something we want to avoid!</p><p>A simple way around this would be to make sure an idle command is always sent between two conflicting commands. Of course the PC software will also have to make sure that conflicting commands aren’t sent close together, even if there is an idle sent in between, as the result will be the same but just a bit slower.</p><p>So, it would appear that a simple command station could consist of an Arduino storing just two messages and alternately sending each one. When a new command arrives on the serial port the oldest message is replaced with the new one. And so on….</p><p>Another part of the DCC standard (in a line just before the above) says:</p><ul><li>Packets sent to Digital Decoders should be repeated as frequently as possible, as a packet may have been lost due to noise or poor electrical conductivity between wheels and rails.</li></ul><p>What this means in practice I am not sure, but to me it means that the software on the PC has to either limit the pace at which new commands are sent so that the last command can be sent multiple times, or alternatively if there are lots of commands to be sent, the software remembers to re-send old commands a number of times by interleaving them with new commands.</p><p>So that is where I’ll start with my Command Station. I intend to modify the Arduino ‘transmitting’ code mentioned in the <a href="https://www.yoursite.com/2015/2015-01-02-sending-dcc-with-arduino">previous post</a> to accept commands from my Mac and I’ll monitor the results using the DCC monitor code on my other Arduino. After I get something working I’ll post it here.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.yoursite.com/2015/2015-01-02-sending-dcc-with-arduino</guid><title>Sending DCC With An Arduino</title><link>https://www.yoursite.com/2015/2015-01-02-sending-dcc-with-arduino</link><description><![CDATA[In my last post I mentioned that I now have 2 Arduino controller boards for experimenting with creating my own DCC command station, booster and DCC decoder. However, one of the problems with developing your own software and hardware that works together is that when something doesn’t work it can be difficult to figure out just where the problem is.]]></description><pubDate>Fri, 02 Jan 2015 23:00:00 +1100</pubDate><dc:creator><![CDATA[NScaleModeller]]></dc:creator><category><![CDATA[Arduino]]></category><category><![CDATA[DCC]]></category><content:encoded><![CDATA[<p>In my last post I mentioned that I now have 2 Arduino controller boards for experimenting with creating my own DCC command station, booster and DCC decoder. However, one of the problems with developing your own software and hardware that works together is that when something doesn’t work it can be difficult to figure out just where the problem is.</p><p>To help get around this I figured that it should be possible to simplify things by hooking two Arduinos directly together and send DCC commands from one to the other. This would at least ensure that the software was working before even having to think about the electronics.</p><p>So that’s what I did, and it worked!</p><!--more-->
<p>In my research on Arduinos and DCC I came across two sites which helped me get started.The first, <a href="http://www.oscale.net/en/simpledcc">OScale.net</a> (<strong>UPDATE:</strong> The OScale link is broken - see below), has code and circuitry for a very simple DCC command station and booster, and the other, <a href="http://www.mynabay.com/dcc_monitor/">MynaBay</a> (<strong>UPDATE:</strong> This link is also broken - see below), has code and circuitry for a DCC monitor. Even though I have all the parts for the electronics for both circuits, I decided at first to simply hook my two Arduinos together and see if I could detect a DCC signal from the ‘command’ Arduino using the other Arduino as a monitor.</p><p>The set up is really simple. I first loaded the monitor software into an Arduino and ran it. The serial window within the Arduino IDE, as expected, showed no DCC. I then loaded the transmitting code into another Arduino and connected the Arduinos together using two wires, one connecting ground together and the other connecting pin 4 of the transmitter to pin 2 of the receiver. I don’t think there is anything special about these pins, but if you look at the code this is what the original authors have defined as DCC_Out and DCC_In respectively.</p><p>Sure enough, the monitor started showing ‘idle’ DCC packets being received!</p><p><strong>UPDATE:</strong> I have a copy of both the OScale and MynaBay software at my <a href="https://github.com/nscalemodeller">GitHub Repository</a>.</p><p><strong>UPDATE:</strong> Here is a picture of the setup.</p><p>[img: 250, /images/2015/two-arduinos.jpg]</p>]]></content:encoded></item></channel></rss>